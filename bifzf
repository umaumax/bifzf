#!/bin/bash

COLUMNS=$COLUMNS bash <(
  cat <<'BASH_EOF'
MAX_LINE=${BIFZF_MAX_LINE:-10}

text=""
cursor_pos=0
target_number=0

in_tty='/dev/tty'
out_tty='/dev/tty'

bifzf_help() {
  printf "\e[33m" 1>&2
  cat 1>&2 <<EOF
usage: $0
e.g.
ls | $0
EOF
  printf "\e[00m" 1>&2
}

if [[ ! -p /dev/stdin ]]; then
  bifzf_help
  exit 1
fi
lines=$(cat)

bifzf_trap_handler() {
  local signal=$(($? - 128))
  bifzf_clear_display
  stty sane
  exit $signal
}
trap bifzf_trap_handler 1 2 3 15

# get space
{
  printf " %${MAX_LINE}s" | tr ' ' '\n'
  printf "\e[1A\e[${MAX_LINE}A" # tput cuu 10

  # save cursor position
  printf "\e7" # tput sc
} >$out_tty

bifzf_clear_display() {
  {
    # restore cursor position
    printf "\e8"  # tput rc
    # clear screen from cursor to end
    printf "\e[J" # tput cd
  } >$out_tty
}
bifzf_display() {
  local text="$1"
  local cursor_pos="$2"
  local target_number="$3"
  {
    # hide cursor
    printf "\e[\x3f\x32\x35\x6c" # tput civis
    bifzf_clear_display
    printf "\e[36m" 1>&2
    printf "> %s\n" "${text:0:$cursor_pos}${text:$cursor_pos}"
    printf "\e[00m" 1>&2
    printf "%s" "$lines" | {
      if [[ -n "$text" ]]; then
        grep -F -i --color=always "$text"
      else
        cat
      fi
    } | awk 'NR <='"$MAX_LINE"' { $0=substr($0, 0,'"$COLUMNS"'-2); if (NR=='"$target_number"'+1) { printf "\033[32m*\033[0m \033[4m%s\033[0m\n", $0; } else { printf "  %s\n", $0;}}'
    # restore cursor position
    printf "\e8" # tput rc
    # move right
    printf "\e[2C"
    if [[ $cursor_pos != 0 ]]; then
      printf "\e[${cursor_pos}C" # tput cuf "$cursor_pos"
    fi
    # show cursor
    printf "\e[34h\e[?25h" # tput cnorm
  } >$out_tty
}

bifzf_main() {
  bifzf_display "$text" "$cursor_pos" "$target_number"
  while true; do
    IFS="" read -rsn1 input <$in_tty

    # enter
    if [[ -z "$input" ]]; then
      break
    fi
    # ESC
    if [[ "$input" == $'\x1b' ]]; then
      IFS="" read -rsn1 input2 <$in_tty
      IFS="" read -rsn1 input3 <$in_tty
      input="${input}${input2}${input3}"

      # up
      if [[ "$input" == $'\x1b\x5b\x41' ]]; then
        ((target_number--))
        if [[ $target_number -lt 0 ]]; then
          target_number=0
        fi
      fi
      # down
      if [[ "$input" == $'\x1b\x5b\x42' ]]; then
        ((target_number++))
      fi
      # left
      if [[ "$input" == $'\x1b\x5b\x44' ]]; then
        ((cursor_pos--))
        if [[ $cursor_pos -lt 0 ]]; then
          cursor_pos=0
        fi
      fi
      # right
      if [[ "$input" == $'\x1b\x5b\x43' ]]; then
        ((cursor_pos++))
        if [[ $cursor_pos -gt ${#text} ]]; then
          cursor_pos=${#text}
        fi
      fi
      bifzf_display "$text" "$cursor_pos" "$target_number"
      continue
    fi
    target_number=0

    # delete
    # NOTE: some bash version has bug of $'\x7f'
    if [[ "$input" == $(printf '\x7f') ]]; then
      left_text="${text:0:$cursor_pos}"
      right_text="${text:$cursor_pos}"
      text="${left_text%?}${right_text}"
      # move left
      ((cursor_pos--))
      if [[ $cursor_pos -lt 0 ]]; then
        cursor_pos=0
      fi
    else
      text="${text}${input}"

      # move right
      ((cursor_pos++))
      if [[ $cursor_pos -gt ${#text} ]]; then
        cursor_pos=${#text}
      fi
    fi

    bifzf_display "$text" "$cursor_pos" "$target_number"
  done

  bifzf_clear_display
  output=$(printf "%s" "$lines" | grep "$text" | awk 'NR=='"$target_number"'+1 { printf "%s", $0}')
  printf "%s" "$output"
}

bifzf_main "$@"
BASH_EOF
) "$@"
